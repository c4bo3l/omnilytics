{"version":3,"sources":["components/CustomContainer/CustomContainer.tsx","components/CustomNavBar/CustomNavBar.tsx","components/Layout/Layout.tsx","hooks/useNumericGenerator.ts","hooks/useGenerateRandomObjects.tsx","hooks/useAlphaNumericGenerator.ts","pages/main/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CustomContainer","props","Container","className","fluid","children","CustomNavBar","Navbar","bg","expand","variant","Brand","Toggle","aria-controls","Layout","useNumericGenerator","multiplier","getRandomIntInRange","min","max","Math","ceil","floor","random","getRandomInteger","length","selectedMultiplier","pow","result","generateIntegerStr","toString","generateFloatStr","generateNumericStr","useGenerateRandomObjects","fileSize","generateString","alphaNumerics","generateAlphaNumeric","Array","apply","map","charAt","join","alphabets","generateAlphabets","useAlphaNumericGenerator","useState","requiredSize","generateFile","content","requiredCharacters","addedContent","generateData","blob","Blob","type","url","window","URL","createObjectURL","MainPage","undefined","setURL","isGenerating","setIsGenerating","setContent","defaultAnalyzeResult","alphabeticals","realNumbers","integers","analyzeResult","setAnalyzeResult","Row","Col","FormGroup","Button","disabled","onClick","generatedFile","sm","style","textAlign","href","download","data","split","forEach","item","floatNumber","parseFloat","test","Alert","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88491f6e.chunk.js","sourcesContent":["import { ReactNode } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport './CustomContainer.css';\r\n\r\ninterface CustomContainerProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const CustomContainer = (props: CustomContainerProps) => {\r\n  return (\r\n    <Container className='root-container' fluid>\r\n      {props.children}\r\n    </Container>\r\n  );\r\n};","import { Navbar } from \"react-bootstrap\";\r\n\r\nexport const CustomNavBar = () => {\r\n  return (\r\n    <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\r\n      <Navbar.Brand>Omnilytics</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n    </Navbar>\r\n  );\r\n};","import { ReactNode } from \"react\";\r\nimport { CustomContainer, CustomNavBar } from \"..\";\r\n\r\nexport const Layout = (props: { children?: ReactNode }) => {\r\n  return (\r\n    <>\r\n      <CustomNavBar />\r\n      <CustomContainer>\r\n        {props.children}\r\n      </CustomContainer>\r\n    </>\r\n  );\r\n};\r\n","export const useNumericGenerator = () => {\r\n  const multiplier = [1, 10, 100, 1000, 10000, 100000];\r\n\r\n  const getRandomIntInRange = (min: number, max: number) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  };\r\n\r\n  const getRandomInteger = (length?: number) => {\r\n    const selectedMultiplier = length ? Math.pow(10, length) : \r\n      multiplier[getRandomIntInRange(0, multiplier.length - 1)];\r\n    const result = Math.random() * selectedMultiplier;\r\n    return Math.ceil(result);\r\n  };\r\n\r\n  const generateIntegerStr = (length?: number) => {\r\n    return getRandomInteger(length).toString();\r\n  };\r\n\r\n  const generateFloatStr = (length?: number) => {\r\n    const selectedMultiplier = length ? Math.pow(10, length) : \r\n      multiplier[getRandomIntInRange(0, multiplier.length - 1)];\r\n    const result = Math.random() * selectedMultiplier;\r\n    return result.toString();\r\n  };\r\n\r\n  const generateNumericStr = (length?: number) => {\r\n    const selector = getRandomIntInRange(0, 1000) % 2;\r\n    if (selector === 0) {\r\n      return generateIntegerStr(length);\r\n    }\r\n    return generateFloatStr(length);\r\n  };\r\n\r\n  return {\r\n    getRandomIntInRange,\r\n    getRandomInteger,\r\n    generateIntegerStr,\r\n    generateFloatStr,\r\n    generateNumericStr\r\n  };\r\n};\r\n","import { useState } from \"react\";\r\nimport { useAlphaNumericGenerator } from \"./useAlphaNumericGenerator\";\r\nimport { useNumericGenerator } from \"./useNumericGenerator\";\r\n\r\nexport const useGenerateRandomObjects = (fileSize?: number) => {\r\n  const { generateString } = useAlphaNumericGenerator();\r\n  const { generateNumericStr, getRandomIntInRange } = useNumericGenerator();\r\n\r\n  const defaultFileSize = 1024 * 1024 * 2; // 2 Megabytes\r\n  const [requiredSize] = useState(fileSize || defaultFileSize)\r\n  const threshold: number = 512;\r\n\r\n  const generateData = () => {\r\n    let content = '';\r\n\r\n    while (content.length < requiredSize) {\r\n      const requiredCharacters = requiredSize - content.length;\r\n      if (requiredCharacters <= threshold) {\r\n        content = `${content},${generateString(requiredCharacters)}`;\r\n      }\r\n      let addedContent = '';\r\n      if (getRandomIntInRange(0, 1000) % 2) {\r\n        addedContent = generateString();\r\n      } else {\r\n        addedContent = generateNumericStr();\r\n      }\r\n      content = `${content.length > 0 ? `${content},` : ''}${addedContent}`;\r\n    }\r\n    return content;\r\n  }\r\n\r\n  const generateFile = () => {\r\n    const content = generateData();\r\n    if (!content || content.length <= 0) {\r\n      return undefined;\r\n    }\r\n\r\n    const blob = new Blob([content], {\r\n      type: 'text/plain'\r\n    });\r\n\r\n    return {\r\n      url: window.URL.createObjectURL(blob),\r\n      content\r\n    };\r\n  };\r\n\r\n  return {\r\n    generateFile\r\n  };\r\n};\r\n","import { useNumericGenerator } from \"./useNumericGenerator\";\r\n\r\nexport const useAlphaNumericGenerator = () => {\r\n  const { getRandomIntInRange } = useNumericGenerator();\r\n  \r\n  const alphaNumerics = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n  const generateAlphaNumeric = (length?: number) => {\r\n    if (!length) {\r\n      length = getRandomIntInRange(5, 100);\r\n    }\r\n    const result: string[] = Array.apply([], Array(length)).map(() => {\r\n      return alphaNumerics.charAt(Math.floor(Math.random() * alphaNumerics.length));\r\n    });\r\n    return result.join('');\r\n  };\r\n\r\n  const alphabets = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n  const generateAlphabets = (length?: number) => {\r\n    if (!length) {\r\n      length = getRandomIntInRange(5, 100);\r\n    }\r\n    const result: string[] = Array.apply([], Array(length)).map(() => {\r\n      return alphabets.charAt(Math.floor(Math.random() * alphabets.length));\r\n    });\r\n    return result.join('');\r\n  };\r\n\r\n  const generateString = (length?: number) => {\r\n    const selector = getRandomIntInRange(0, 1000) % 2;\r\n    if (selector === 0) {\r\n      return generateAlphaNumeric(length);\r\n    }\r\n    return generateAlphabets(length);\r\n  };\r\n\r\n  return {\r\n    generateAlphaNumeric,\r\n    generateAlphabets,\r\n    generateString\r\n  };\r\n};\r\n","import { useState } from \"react\";\r\nimport { Alert, Button, Col, FormGroup, Row } from \"react-bootstrap\";\r\nimport { useGenerateRandomObjects } from \"../../hooks\";\r\n\r\nexport type analyzeType = {\r\n  alphabeticals: number;\r\n  realNumbers: number;\r\n  integers: number;\r\n  alphaNumerics: number;\r\n};\r\n\r\nexport const MainPage = () => {\r\n  const { generateFile } = useGenerateRandomObjects();\r\n  const [url, setURL] = useState<string | undefined>(undefined);\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [content, setContent] = useState<string | undefined>(undefined);\r\n\r\n  const defaultAnalyzeResult: analyzeType = {\r\n    alphabeticals: 0,\r\n    realNumbers: 0,\r\n    integers: 0,\r\n    alphaNumerics: 0\r\n  };\r\n\r\n  const [analyzeResult, setAnalyzeResult] = useState(defaultAnalyzeResult);\r\n\r\n  const generate = () => {\r\n    setIsGenerating(true);\r\n    const generatedFile = generateFile();\r\n    setURL(generatedFile?.url);\r\n    setContent(generatedFile?.content);\r\n    setIsGenerating(false);\r\n    setAnalyzeResult(defaultAnalyzeResult);\r\n  };\r\n\r\n  const analyzeContent = () => {\r\n    const data = content?.split(',');\r\n    if (!data) {\r\n      setAnalyzeResult(defaultAnalyzeResult);\r\n      return;\r\n    }\r\n\r\n    let result: analyzeType = { ...defaultAnalyzeResult };\r\n\r\n    data.forEach((item) => {\r\n      const floatNumber = parseFloat(item);\r\n      if (floatNumber) {\r\n        if (floatNumber === Math.floor(floatNumber)) {\r\n          result = {\r\n            ...result,\r\n            integers: result.integers + 1\r\n          };\r\n        } else {\r\n          result = {\r\n            ...result,\r\n            realNumbers: result.realNumbers + 1\r\n          };\r\n        }\r\n      } else if (/^[a-zA-Z]+$/.test(item)) {\r\n        result = {\r\n          ...result,\r\n          alphabeticals: result.alphabeticals + 1\r\n        };\r\n      } else {\r\n        result = {\r\n          ...result,\r\n          alphaNumerics: result.alphaNumerics + 1\r\n        };\r\n      }\r\n    });\r\n\r\n    setAnalyzeResult({ ...result });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col>\r\n          <FormGroup>\r\n            <Button\r\n              variant='primary'\r\n              disabled={isGenerating}\r\n              onClick={generate}\r\n            >\r\n              {\r\n                isGenerating ?\r\n                  'Generating...' :\r\n                  'Generate'\r\n              }\r\n            </Button>\r\n          </FormGroup>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col sm={1} style={{textAlign: 'right'}}>\r\n          <p>Link:</p>\r\n        </Col>\r\n        <Col>\r\n          {\r\n            url &&\r\n            <a\r\n              href={url}\r\n              download='data.txt'\r\n            >\r\n              {url}\r\n            </a>\r\n          }\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <FormGroup>\r\n            <Button\r\n              variant='secondary'\r\n              disabled={isGenerating || !!!content}\r\n              onClick={analyzeContent}\r\n            >\r\n              Report\r\n            </Button>\r\n          </FormGroup>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <FormGroup>\r\n            <Alert variant='primary'>\r\n              {\r\n                `Alphabetical string: ${analyzeResult.alphabeticals}`\r\n              }\r\n            </Alert>\r\n          </FormGroup>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <FormGroup>\r\n            <Alert variant='secondary'>\r\n              {\r\n                `Real numbers: ${analyzeResult.realNumbers}`\r\n              }\r\n            </Alert>\r\n          </FormGroup>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <FormGroup>\r\n            <Alert variant='info'>\r\n              {\r\n                `Integers: ${analyzeResult.integers}`\r\n              }\r\n            </Alert>\r\n          </FormGroup>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <FormGroup>\r\n            <Alert variant='dark'>\r\n              {\r\n                `Alphanumerics: ${analyzeResult.alphaNumerics}`\r\n              }\r\n            </Alert>\r\n          </FormGroup>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}","import { Layout } from \"./components\";\r\nimport { MainPage } from \"./pages\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Layout>\r\n      <MainPage />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}